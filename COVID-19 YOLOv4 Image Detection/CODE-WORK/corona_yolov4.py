# -*- coding: utf-8 -*-
"""Corona_YOLOv4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1POzfKdniF9VhZP13SBTroygvHIJ1Ri7D

# Cloning and Building Darknet
"""

# clone darknet repo
!git clone https://github.com/AlexeyAB/darknet

# Commented out IPython magic to ensure Python compatibility.
# change makefile to have GPU and OPENCV enabled
# %cd darknet
!sed -i 's/OPENCV=0/OPENCV=1/' Makefile
!sed -i 's/GPU=0/GPU=1/' Makefile
!sed -i 's/CUDNN=0/CUDNN=1/' Makefile
!sed -i 's/CUDNN_HALF=0/CUDNN_HALF=1/' Makefile

# verify CUDA
!/usr/local/cuda/bin/nvcc --version

# make darknet (builds darknet so that you can then use the darknet executable file to run or train object detectors)
!make

"""# Download pre-trained YOLOv4 weights"""

!wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.weights

"""# Functions for plotting and gathering data"""

# Commented out IPython magic to ensure Python compatibility.
# define plot functions
def imShow(path):
  import cv2
  import matplotlib.pyplot as plt
#   %matplotlib inline

  image = cv2.imread(path)
  height, width = image.shape[:2]
  resized_image = cv2.resize(image,(3*width, 3*height), interpolation = cv2.INTER_CUBIC)

  fig = plt.gcf()
  fig.set_size_inches(18, 10)
  plt.axis("off")
  plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))
  plt.show()

# uploads files
def upload():
  from google.colab import files
  uploaded = files.upload() 
  for name, data in uploaded.items():
    with open(name, 'wb') as f:
      f.write(data)
      print ('saved file', name)

# downloads files  
def download(path):
  from google.colab import files
  files.download(path)

"""# YOLOv4 Detection test using COCO dataset"""

# run darknet detection on test images
!./darknet detector test cfg/coco.data cfg/yolov4.cfg yolov4.weights data/person.jpg

# testing out the print function
imShow('predictions.jpg')

# This stops 'Run all' at this cell by causing an error

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/darknet/

"""# Connection to GOOGLE DRIVE"""

# Commented out IPython magic to ensure Python compatibility.
# %cd ..
from google.colab import drive
drive.mount('/content/gdrive')

# this creates a symbolic link so that now the path /content/gdrive/My\ Drive/ is equal to /mydrive
!ln -s /content/gdrive/My\ Drive/ /mydrive
!ls /mydrive

# Commented out IPython magic to ensure Python compatibility.
# cd back into the darknet folder to run detections
# %cd darknet

# running darknet with dont show flag set (no longer get warnings)
#!./darknet detector test cfg/coco.data cfg/yolov4.cfg yolov4.weights data/person.jpg -dont_show

"""# Getting the COVID-19 Datasets Into Cloud VM"""

# this is where my datasets are stored within my Google Drive (I created a yolov4 folder to store all important files for custom training) 
!ls /mydrive/yolov4

# copying over both datasets into the root directory of the Colab VM
!cp /mydrive/yolov4/obj.zip ../
!cp /mydrive/yolov4/test.zip ../

# unzip the datasets and their contents so that they are now in /darknet/data/ folder
!unzip ../obj.zip -d data/
!unzip ../test.zip -d data/
!unzip ../obj2.zip -d data/
!unzip ../test2.zip -d data/

"""## i) Cfg File
Copying the .cfg files to the Google Drive. (This allowed me to edit these features in the text editor)
"""

# download cfg to google drive and change its name
#!cp cfg/yolov4-custom.cfg /mydrive/yolov4/yolov4-obj.cfg
#!cp cfg/yolov4-tiny.cfg /mydrive/yolov4/yolov4-tiny.cfg
#!cp cfg/efficientnet_b0.cfg

#download('cfg/yolov4-custom.cfg')

"""having **batch = 64** and **subdivisions = 16** gave me the best results but if I ran out of memeory I increased the subdivisions.

I set my **max_batches = 6000**, **steps = 4800, 5400**, I changed the **classes = 1** in the three YOLO layers and **filters = 18** in the three convolutional layers before the YOLO layers.

Configure of Variables:

width = 416 / height = 416

**(these can be any multiple of 32, 416 is standard it can be increased and and improve results but it will slow down training which will time out the system and restart the training.)**

max_batches = (# of classes) * 2000
**(but no less than 6000 so if you are training for 1, 2, or 3 classes it will be 6000, however detector for 5 classes would have max_batches=10000)**

steps = (80% of max_batches), (90% of max_batches)
**(so if your max_batches = 10000, then steps = 8000, 9000)**

filters = (# of classes + 5) * 3
**(so if you are training for one class then your filters = 18, but if you are training for 4 classes then your filters = 27)**
"""

# upload the custom .cfg back to cloud VM from Google Drive
!cp /mydrive/yolov4/yolov4-obj.cfg ./cfg
!cp /mydrive/yolov4/yolov4-tiny.cfg ./cfg
!cp /mydrive/yolov4/yolov4-tiny-3l.cfg ./cfg
!cp /mydrive/yolov4/EEF.cfg ./cfg

# upload the obj.names and obj.data files to cloud VM from Google Drive
!cp /mydrive/yolov4/obj.names ./data
!cp /mydrive/yolov4/obj.data  ./data

# upload the generate_train.py and generate_test.py script to cloud VM from Google Drive
!cp /mydrive/yolov4/generate_train.py ./
!cp /mydrive/yolov4/generate_test.py ./

!python generate_train.py
!python generate_test.py

# verify that the newly generated train.txt and test.txt can be seen in our darknet/data folder
!ls data/

"""# Download pre-trained weights for the convolutional layers.
This step downloads the weights for the convolutional layers of the YOLOv4 network.
"""

!wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.conv.137
#!wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4-tiny.conv.29

# The Capture was here to help when my google collab crashed
# %%capture
#!./darknet detector train data/obj.data cfg/yolov4-obj.cfg yolov4.conv.137 -dont_show -map
#!./darknet detector train data/obj.data cfg/yolov4-tiny.cfg -dont_show -map
!./darknet detector train data/obj.data cfg/yolov4-tiny-3l.cfg -dont_show -map
#!./darknet detector train data/obj.data cfg/EEF.cfg -dont_show -map

"""After training, you can observe a chart of how your model did throughout the training process by running the below command. It shows a chart of your average loss vs. iterations. For your model to be 'accurate' you should aim for a loss under 2."""

# show chart.png of how custom object detector did with training
imShow('chart.png')

#!./darknet detector train data/obj.data cfg/yolov4-obj.cfg /mydrive/yolov4/backup/yolov4-obj_last.weights -dont_show

# kick off training from where it last saved
#!./darknet detector train data/obj.data cfg/yolov4-obj.cfg /mydrive/yolov4/backup/yolov4-obj_best.weights -dont_show

!./darknet detector train data/obj.data cfg/yolov4-obj.cfg yolov4.conv.137 -dont_show -map

# show chart.png of how custom object detector did with training
imShow('chart.png')

!./darknet detector train data/obj.data cfg/yolov4-tiny.cfg -dont_show -map

# show chart.png of how custom object detector did with training
imShow('chart.png')

!./darknet detector train data/obj.data cfg/yolov4-tiny-3l.cfg -dont_show -map

# show chart.png of how custom object detector did with training
imShow('chart.png')

"""# Step 6: Checking the Mean Average Precision (mAP) of Your Model"""

#!./darknet detector map data/obj.data cfg/yolov4-obj.cfg /mydrive/yolov4/backup/yolov4-obj_best.weights
#!./darknet detector map data/obj.data cfg/yolov4-tiny.cfg /mydrive/yolov4/backup/yolov4-tiny_best.weights
!./darknet detector map data/obj.data cfg/yolov4-tiny-3l.cfg /mydrive/yolov4/backup/yolov4-tiny-3l_best.weights
#!./darknet detector map data/obj.data cfg/EEF.cfg /mydrive/yolov4/backup/EEF_last.weights

"""#Run Your Custom Object Detector!
Costom detection gathering darknets weights testing it with the test data.
"""

# Commented out IPython magic to ensure Python compatibility.
# need to set our custom cfg to test mode 
# %cd cfg
!sed -i 's/batch=64/batch=1/' yolov4-obj.cfg
!sed -i 's/subdivisions=16/subdivisions=1/' yolov4-obj.cfg
# %cd ..

# Commented out IPython magic to ensure Python compatibility.
# %cd cfg
!sed -i 's/batch=64/batch=1/' yolov4-tiny.cfg
!sed -i 's/subdivisions=16/subdivisions=1/' yolov4-tiny.cfg
# %cd ..

# Commented out IPython magic to ensure Python compatibility.
# %cd cfg
!sed -i 's/batch=64/batch=1/' yolov4-tiny-3l.cfg
!sed -i 's/subdivisions=16/subdivisions=1/' yolov4-tiny-3l.cfg
# %cd ..

# Commented out IPython magic to ensure Python compatibility.
# %cd cfg
!sed -i 's/batch=64/batch=1/' EEF.cfg
!sed -i 's/subdivisions=16/subdivisions=1/' EEF.cfg
# %cd ..

!./darknet detector test data/obj.data cfg/yolov4-tiny-3l.cfg /mydrive/yolov4/backup/yolov4-tiny-3l_last.weights /content/darknet/data/obj/04c17986-8a5d-446f-a3ec-46ace41aeca8_jpg.rf.53d10b5b9e3291ed397edf650c298b98.jpg -thresh 0.3
imShow('predictions.jpg')

# runs the custom detector (uploads an image from google drive to test, thresh flag sets accuracy that detection must be in order to show it)
!./darknet detector test data/obj.data cfg/yolov4-tiny.cfg /mydrive/yolov4/backup/yolov4-obj_best.weights /content/darknet/data/obj/04c17986-8a5d-446f-a3ec-46ace41aeca8_jpg.rf.53d10b5b9e3291ed397edf650c298b98.jpg -thresh 0.3
imShow('predictions.jpg')

# runs the custom detector (uploads an image from google drive to test, thresh flag sets accuracy that detection must be in order to show it)
!./darknet detector test data/obj.data cfg/yolov4-tiny.cfg /mydrive/yolov4/backup/yolov4-tiny_best.weights /content/darknet/data/test/covid-19-pneumonia-53_jpg.rf.d678d94ade587455c1c61179dc61cc09.jpg -thresh 0.3
imShow('predictions.jpg')

!./darknet detector test data/obj.data cfg/yolov4-obj.cfg /mydrive/yolov4/backup/yolov4-obj_best.weights /content/darknet/data/obj/covid-19-pneumonia-42_jpeg.rf.1f7c6d03c1c2c927d319b78f659d8bbc.jpg -thresh 0.3
imShow('predictions.jpg')

!./darknet detector test data/obj.data cfg/yolov4-obj.cfg /mydrive/yolov4/backup/yolov4-obj_best.weights /content/darknet/data/obj/covid-19-pneumonia-42_jpeg.rf.1f7c6d03c1c2c927d319b78f659d8bbc.jpg -thresh 0.3
imShow('predictions.jpg')

!./darknet detector test data/obj.data cfg/yolov4-obj.cfg /mydrive/yolov4/backup/yolov4-obj_best.weights /content/darknet/data/test/covid-19-pneumonia-53_jpg.rf.d678d94ade587455c1c61179dc61cc09.jpg -thresh 0.3
imShow('predictions.jpg')

!./darknet detector test data/obj.data cfg/yolov4-tiny.cfg /mydrive/yolov4/backup/yolov4-obj_best.weights /content/darknet/data/obj/kjr-21-e24-g003-l-a_jpg.rf.d4844608b33b5320411560f81856dd3c.jpg -thresh 0.3
imShow('predictions.jpg')